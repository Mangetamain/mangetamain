#!/usr/bin/env python3
"""
MangeTaMain Streamlit App - Version Production Orient√©e Objet
Architecture en classes pour une meilleure organisation du code
"""

import streamlit as st
import pandas as pd
import numpy as np
import sys
import os
from datetime import datetime
from typing import Optional, List, Tuple


class StyleManager:
    """Gestionnaire des styles CSS pour l'application"""
    
    @staticmethod
    def apply_styles():
        """Applique les styles CSS √† l'application"""
        st.markdown("""
        <style>
        .main-header {
            background: linear-gradient(90deg, #ff6b6b, #4ecdc4);
            padding: 1rem;
            border-radius: 10px;
            text-align: center;
            color: white;
            margin-bottom: 2rem;
        }
        .metric-card {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            border-left: 4px solid #4ecdc4;
        }
        .recipe-card {
            background: white;
            padding: 1.5rem;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 1rem;
            border-left: 4px solid #ff6b6b;
        }
        </style>
        """, unsafe_allow_html=True)


class DataManager:
    """Gestionnaire des donn√©es de l'application"""
    
    def __init__(self):
        self.recipes_path = "/shared_data/recipes_processed.pkl"
        self.interactions_path = "/shared_data/interactions.pkl"
    
    @st.cache_data(ttl=3600, show_spinner=False)
    def load_preprocessed_data(_self) -> Tuple[Optional[pd.DataFrame], Optional[pd.DataFrame]]:
        """
        Chargement automatique des donn√©es preprocess√©es - VERSION SIMPLIFI√âE
        """
        try:
            # V√©rifier que les donn√©es existent
            if not os.path.exists(_self.recipes_path):
                st.error("‚ùå Donn√©es preprocess√©es non trouv√©es. Ex√©cutez d'abord le preprocessing.")
                return None, None
            
            # Charger les donn√©es
            with st.spinner("‚ö° Chargement des donn√©es preprocess√©es..."):
                recipes_df = pd.read_pickle(_self.recipes_path)
                interactions_df = pd.read_pickle(_self.interactions_path)
            
            st.success(f"‚úÖ Donn√©es charg√©es: {len(recipes_df):,} recettes avec {len(interactions_df):,} interactions")
            
            return recipes_df, interactions_df
            
        except Exception as e:
            st.error(f"‚ùå Erreur de chargement: {e}")
            return None, None


class RecommendationEngine:
    """Moteur de recommandations"""
    
    @staticmethod
    @st.cache_data(ttl=1800, show_spinner=False)
    def get_recommendations(recipes_df: pd.DataFrame, 
                          interactions_df: pd.DataFrame, 
                          user_ingredients: List[str], 
                          time_limit: Optional[int], 
                          n_recommendations: int) -> pd.DataFrame:
        """
        Syst√®me de recommandation avec cache
        """
        try:
            # Import du syst√®me de scoring
            sys.path.append('/preprocessing')
            from reco_score import RecipeScorer
            
            # Cr√©er le scorer et obtenir les recommandations
            scorer = RecipeScorer(alpha=0.5, beta=0.3, gamma=0.2)

            recommendations = scorer.recommend(
                recipes_df=recipes_df,
                interactions_df=interactions_df,
                user_ingredients=user_ingredients,
                time_limit=time_limit,
                top_n=n_recommendations
            )
            
            return recommendations
            
        except Exception as e:
            st.error(f"‚ùå Erreur recommandation: {e}")
            return pd.DataFrame()


class UIComponents:
    """Composants d'interface utilisateur"""
    
    @staticmethod
    def display_recipe_card(recipe: pd.Series, rank: int, user_ingredients: List[str]):
        """Affiche une carte de recette styl√©e"""
        
        with st.container():
            st.markdown(f"""
            <div class="recipe-card">
                <h3>üèÜ #{rank} - {recipe['name']}</h3>
            </div>
            """, unsafe_allow_html=True)
            
            # M√©triques en colonnes
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("üéØ Score Global", f"{recipe['score']:.3f}")
            
            with col2:
                st.metric("ü•Ñ Jaccard", f"{recipe['jaccard']:.3f}")
            
            with col3:
                if pd.notnull(recipe.get('minutes')):
                    st.metric("‚è±Ô∏è Temps", f"{recipe['minutes']} min")
                else:
                    st.metric("‚è±Ô∏è Temps", "N/A")
            
            with col4:
                if pd.notnull(recipe.get('mean_rating_norm')):
                    st.metric("‚≠ê Rating", f"{recipe['mean_rating_norm']:.2f}")
            
            # D√©tails des ingr√©dients
            if 'normalized_ingredients' in recipe and isinstance(recipe['normalized_ingredients'], list):
                recipe_ingredients = recipe['normalized_ingredients']
                common_ingredients = set(user_ingredients) & set(recipe_ingredients)
                missing_ingredients = set(recipe_ingredients) - set(user_ingredients)
                
                if common_ingredients:
                    st.success(f"ü§ù **Ingr√©dients que vous avez**: {', '.join(sorted(common_ingredients))}")
                
                if missing_ingredients:
                    missing_list = list(missing_ingredients)[:8]  # Limiter l'affichage
                    st.info(f"üõí **√Ä acheter**: {', '.join(missing_list)}" + 
                           (f" + {len(missing_ingredients)-8} autres..." if len(missing_ingredients) > 8 else ""))
            
            # Description si disponible
            if pd.notnull(recipe.get('description')):
                with st.expander("üìñ Description"):
                    desc = str(recipe['description'])
                    st.write(desc[:300] + "..." if len(desc) > 300 else desc)
    
    @staticmethod
    def display_main_header():
        """Affiche l'en-t√™te principal"""
        st.markdown("""
        <div class="main-header">
            <h1>üçΩÔ∏è MangeTaMain - Recommandations Personnalis√©es</h1>
            <p>Trouvez les meilleures recettes avec vos ingr√©dients disponibles</p>
        </div>
        """, unsafe_allow_html=True)
    
    @staticmethod
    def display_sidebar_stats(recipes_df: pd.DataFrame, interactions_df: pd.DataFrame):
        """Affiche les statistiques dans la sidebar"""
        with st.sidebar:
            st.header("üìä Statistiques du Dataset")
            
            # M√©triques du dataset
            st.markdown('<div class="metric-card">', unsafe_allow_html=True)
            st.metric("üçΩÔ∏è Recettes Disponibles", f"{len(recipes_df):,}")
            st.metric("üë• Interactions Utilisateurs", f"{len(interactions_df):,}")
            
            # Calculer quelques stats en temps r√©el
            if 'normalized_ingredients' in recipes_df.columns:
                has_ingredients = recipes_df['normalized_ingredients'].apply(
                    lambda x: isinstance(x, list) and len(x) > 0
                ).sum()
                st.metric("‚úÖ Recettes avec Ingr√©dients", f"{has_ingredients:,}")
            
            st.metric("üìà Taux de Couverture", "100%")
            st.info(f"üìÖ Derni√®re mise √† jour: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
            
            st.markdown('</div>', unsafe_allow_html=True)
            
            st.markdown("---")
            st.markdown("### üéØ Comment utiliser")
            st.markdown("""
            1. **Entrez vos ingr√©dients** disponibles
            2. **S√©lectionnez le temps** de pr√©paration max
            3. **Ajustez le nombre** de recommandations
            4. **Cliquez sur Recommander** üöÄ
            """)
    
    @staticmethod
    def display_footer():
        """Affiche le footer de l'application"""
        st.markdown("---")
        st.markdown("""
        <div style="text-align: center; color: #666; padding: 2rem;">
            üçΩÔ∏è <strong>MangeTaMain</strong> - Syst√®me de Recommandation de Recettes<br>
            D√©velopp√© avec ‚ù§Ô∏è en utilisant Streamlit et des donn√©es Food.com
        </div>
        """, unsafe_allow_html=True)

class MangeTaMainApp:
    """Application principale de MangeTaMain"""
    
    def __init__(self):
        """Initialise l'application avec ses composants"""
        self.data_manager = DataManager()
        self.recommendation_engine = RecommendationEngine()
        self.ui_components = UIComponents()
    
    def run(self):
        """Lance l'application principale"""
        
        # Appliquer les styles
        StyleManager.apply_styles()
        
        # Header principal
        self.ui_components.display_main_header()
        
        # === CHARGEMENT DES DONN√âES ===
        data_result = self.data_manager.load_preprocessed_data()
        
        if data_result is None or data_result[0] is None:
            st.stop()
        
        recipes_df, interactions_df = data_result
        
        # === SIDEBAR - INFORMATIONS ===
        self.ui_components.display_sidebar_stats(recipes_df, interactions_df)
        
        # === INTERFACE PRINCIPALE ===
        st.header("ü•Ñ Vos Ingr√©dients Disponibles")
        
        # Zone de saisie des ingr√©dients
        col_input, col_time = st.columns([3, 1])
        
        with col_input:
            user_input = st.text_input(
                "Entrez vos ingr√©dients (s√©par√©s par des virgules):",
                placeholder="chicken, onion, garlic, tomato, basil, olive oil, salt, pepper",
                help="Tapez les ingr√©dients que vous avez dans votre frigo, s√©par√©s par des virgules"
            )
        
        with col_time:
            time_options = [None, 15, 30, 45, 60, 90, 120, 180]
            time_limit = st.selectbox(
                "‚è±Ô∏è Temps max (min):",
                time_options,
                format_func=lambda x: "Illimit√©" if x is None else f"{x} min"
            )
        
        # Param√®tres additionnels
        col_recs, col_button = st.columns([1, 2])
        
        with col_recs:
            n_recommendations = st.slider(
                "üèÜ Nombre de recommandations:", 
                min_value=1, max_value=20, value=8
            )
        
        with col_button:
            st.write("")  # Spacer
            recommend_button = st.button(
                "üîç Obtenir les Recommandations", 
                type="primary",
                use_container_width=True
            )
        
        # === RECOMMANDATIONS ===
        if recommend_button and user_input.strip():
            
            # Parser les ingr√©dients
            user_ingredients = [ing.strip().lower() for ing in user_input.split(",") if ing.strip()]
            
            st.markdown("---")
            st.subheader(f"üéØ Recommandations pour: {', '.join(user_ingredients[:5])}" + 
                        (f" + {len(user_ingredients)-5} autres..." if len(user_ingredients) > 5 else ""))
            
            # Obtenir les recommandations
            with st.spinner("üîÑ G√©n√©ration des recommandations personnalis√©es..."):
                recommendations = self.recommendation_engine.get_recommendations(
                    recipes_df, interactions_df, user_ingredients, time_limit, n_recommendations
                )
            
            if not recommendations.empty:
                
                # Statistiques rapides
                avg_jaccard = recommendations['jaccard'].mean()
                max_jaccard = recommendations['jaccard'].max()
                matches_count = (recommendations['jaccard'] > 0).sum()
                
                st.success(f"üéâ **{len(recommendations)} recommandations g√©n√©r√©es** | "
                          f"Correspondances moyennes: {avg_jaccard:.2f} | "
                          f"Recettes avec matches: {matches_count}/{len(recommendations)}")
                
                # Afficher les recommandations
                for i, (_, recipe) in enumerate(recommendations.iterrows(), 1):
                    self.ui_components.display_recipe_card(recipe, i, user_ingredients)
                    
            else:
                st.warning("‚ùå Aucune recommandation trouv√©e avec ces crit√®res")
                st.info("üí° Essayez avec des ingr√©dients plus communs ou supprimez la limite de temps")
        
        elif recommend_button and not user_input.strip():
            st.warning("‚ö†Ô∏è Veuillez entrer au moins un ingr√©dient")
        
        # === FOOTER ===
        self.ui_components.display_footer()


def main():
    """Point d'entr√©e principal de l'application"""
    # Configuration Streamlit
    st.set_page_config(
        page_title="üçΩÔ∏è MangeTaMain - Production", 
        page_icon="üçΩÔ∏è",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Cr√©er et lancer l'application
    app = MangeTaMainApp()
    app.run()


if __name__ == "__main__":
    main()