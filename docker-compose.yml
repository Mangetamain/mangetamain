services:
  # Data volume service - pulls preprocessed data from Docker Hub
  data-volume:
    image: andranik777/mangetamain-data:latest
    platform: linux/arm64
    profiles: ["use-prebuilt"]
    volumes:
      - preprocessed_data:/shared_data
    command: /bin/sh -c "cp -r /data/* /shared_data/ && echo 'Data volume ready' && tail -f /dev/null"
    networks:
      - app-network

  # Service de preprocessing - only runs when rebuilding data
  preprocessing:
    build: ./preprocessing
    profiles: ["rebuild-data"]
    volumes:
      - ./preprocessing:/app
      - kaggle_cache:/app/cache
      - preprocessed_data:/shared_data
    environment:
      - POETRY_CACHE_DIR=/tmp/poetry_cache
      - PYTHONPATH=/app
      - KAGGLE_CONFIG_DIR=/app/.kaggle
    working_dir: /app
    command: bash -c "poetry install && poetry run python pipeline.py && echo 'Preprocessing complete - data ready in /shared_data'"
    networks:
      - app-network

  # Service Streamlit production - SANS depends_on problématique
  streamlit-app:
    build: ./streamlit-poetry-docker
    ports:
      - "8501:8501"
    volumes:
      - ./streamlit-poetry-docker:/app
      - ./preprocessing:/preprocessing
      - preprocessed_data:/shared_data
    environment:
      - POETRY_CACHE_DIR=/tmp/poetry_cache
      - PYTHONPATH=/app:/preprocessing
    working_dir: /app
    command: poetry run streamlit run app.py --server.address=0.0.0.0 --server.port=8501
    # ✅ PAS DE depends_on - let it run independently
    networks:
      - app-network

  # Service Streamlit avec dépendance data-volume (pour use-prebuilt)
  streamlit-with-prebuilt:
    build: ./streamlit-poetry-docker
    profiles: ["use-prebuilt"]
    ports:
      - "8501:8501"
    volumes:
      - ./streamlit-poetry-docker:/app
      - ./preprocessing:/preprocessing
      - preprocessed_data:/shared_data
    environment:
      - POETRY_CACHE_DIR=/tmp/poetry_cache
      - PYTHONPATH=/app:/preprocessing
    working_dir: /app
    command: poetry run streamlit run app.py --server.address=0.0.0.0 --server.port=8501
    depends_on:
      - data-volume
    networks:
      - app-network

  # Service Streamlit avec dépendance preprocessing (pour rebuild-data)
  streamlit-with-rebuild:
    build: ./streamlit-poetry-docker
    profiles: ["rebuild-data"]
    ports:
      - "8501:8501"
    volumes:
      - ./streamlit-poetry-docker:/app
      - ./preprocessing:/preprocessing
      - preprocessed_data:/shared_data
    environment:
      - POETRY_CACHE_DIR=/tmp/poetry_cache
      - PYTHONPATH=/app:/preprocessing
    working_dir: /app
    command: poetry run streamlit run app.py --server.address=0.0.0.0 --server.port=8501
    depends_on:
      - preprocessing
    networks:
      - app-network

  # Service de tests automatisés
  tests:
    profiles: ["testing"]
    build:
      context: ./streamlit-poetry-docker
      dockerfile: Dockerfile.test
    volumes:
      - ./streamlit-poetry-docker:/app
      - ./tests:/app/tests
      - ./preprocessing:/preprocessing
      - preprocessed_data:/shared_data
      - test_reports:/app/test-reports
    environment:
      - POETRY_CACHE_DIR=/tmp/poetry_cache
      - PYTHONPATH=/app:/preprocessing
    working_dir: /app
    command: poetry run pytest tests/ --cov=src --cov-report=html:/app/test-reports/htmlcov --cov-report=xml:/app/test-reports/coverage.xml --cov-report=term-missing
    networks:
      - app-network

  # Service de développement de tests interactif
  tests-dev:
    profiles: ["testing"]
    build:
      context: ./streamlit-poetry-docker
      dockerfile: Dockerfile.test
    volumes:
      - ./streamlit-poetry-docker:/app
      - ./tests:/app/tests
      - ./preprocessing:/preprocessing
      - preprocessed_data:/shared_data
      - test_reports:/app/test-reports
    environment:
      - POETRY_CACHE_DIR=/tmp/poetry_cache
      - PYTHONPATH=/app:/preprocessing
    working_dir: /app
    command: bash
    stdin_open: true
    tty: true
    networks:
      - app-network

volumes:
  preprocessed_data:
  kaggle_cache:
  test_reports:

networks:
  app-network:
    driver: bridge