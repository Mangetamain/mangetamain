services:
  # Data volume service - pulls preprocessed data from Docker Hub
  data-volume:
    image: andranik777/mangetamain-data:latest
    # platform: linux/arm64  # Auto-detect platform (now supports both ARM64 and AMD64)
    profiles: ["use-prebuilt"]
    volumes:
      - preprocessed_data:/shared_data
    command: /bin/sh -c "cp -r /data/* /shared_data/ && echo 'Data volume ready' && tail -f /dev/null"
    networks:
      - app-network

  # Service de preprocessing - only runs when rebuilding data
  preprocessing:
    build: ./preprocessing
    profiles: ["rebuild-data"]
    volumes:
      - ./preprocessing:/app
      - kaggle_cache:/app/cache  # Cache Kaggle pour éviter les re-téléchargements
      - preprocessed_data:/shared_data  # Volume for preprocessed data
    environment:
      - POETRY_CACHE_DIR=/tmp/poetry_cache
      - PYTHONPATH=/app
      - KAGGLE_CONFIG_DIR=/app/.kaggle  # Configuration Kaggle
    working_dir: /app
    command: bash -c "poetry install && poetry run python pipeline.py && echo 'Preprocessing complete - data ready in /shared_data'"
    networks:
      - app-network

  # Service Streamlit production
  streamlit-app:
    build: ./streamlit-poetry-docker
    ports:
      - "8501:8501"
    volumes:
      - ./streamlit-poetry-docker:/app
      - ./preprocessing:/preprocessing
      - preprocessed_data:/shared_data  # Use preprocessed data from volume
    environment:
      - POETRY_CACHE_DIR=/tmp/poetry_cache
      - PYTHONPATH=/app:/preprocessing
    working_dir: /app
    command: poetry run streamlit run app.py --server.address=0.0.0.0 --server.port=8501
    networks:
      - app-network

  # Service de tests automatisés
  tests:
    profiles: ["testing"]
    build:
      context: ./streamlit-poetry-docker
      dockerfile: Dockerfile.test
    volumes:
      - ./streamlit-poetry-docker:/app
      - ./tests:/app/tests  # Monter le dossier tests depuis la racine
      - ./preprocessing:/preprocessing
      - ./data:/app/data
      - preprocessed_data:/shared_data
      - test_reports:/app/test-reports  # Volume pour les rapports de tests
    environment:
      - POETRY_CACHE_DIR=/tmp/poetry_cache
      - PYTHONPATH=/app:/preprocessing
    working_dir: /app
    command: poetry run pytest tests/ --cov=src --cov-report=html:/app/test-reports/htmlcov --cov-report=xml:/app/test-reports/coverage.xml --cov-report=term-missing
    networks:
      - app-network

  # Service de développement de tests interactif
  tests-dev:
    profiles: ["testing"]
    build:
      context: ./streamlit-poetry-docker
      dockerfile: Dockerfile.test
    volumes:
      - ./streamlit-poetry-docker:/app
      - ./tests:/app/tests  # Monter le dossier tests depuis la racine
      - ./preprocessing:/preprocessing
      - preprocessed_data:/app/data
      - test_reports:/app/test-reports
    environment:
      - POETRY_CACHE_DIR=/tmp/poetry_cache
      - PYTHONPATH=/app:/preprocessing
    working_dir: /app
    command: bash
    stdin_open: true
    tty: true
    networks:
      - app-network

volumes:
  preprocessed_data:  # Volume for preprocessed data (from Docker Hub or rebuilt)
  kaggle_cache:  # Cache pour les données Kaggle
  test_reports:  # Volume pour les rapports de tests

networks:
  app-network:
    driver: bridge